#########   Implement Secrets store csi driver  ##########

Secrets Store CSI Driver synchronizes secrets from External APIs (AWS secrets manager) and mounts them into the container as volume
With SS CSI driver we don't really create a k8s secret in the cluster, it will pull the secrets dynamically/on runtime from the AWS secrets manager and mount them as volume into the container. 
That means we are no longer storing our secrets in k8s, storing it only at one place that is aws secrets manager.

Working - SS CSI driver commumnicates with secretsproviderclass (using gRPC) to retireve secrets from external Secrets Store (AWS) specified in the SecretProviderClass.

Reference: https://secrets-store-csi-driver.sigs.k8s.io/getting-started/installation

1. Install SS CSI driver 

helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver
helm chart version : helm search repo secrets-store-csi-driver --versions

2. Install the AWS Provider
kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml

NOTE: Point 1 and 2 have been downloaded and stored at https://github.cicd.cloud.fpdev.io/FONE-Operations/devtools/tree/main/charts/secrets-store-csi-driver/templates

3. Create Role with WebIdentity - SecretStoreCSIDriver

Added this trust-policy:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Federated": "arn:aws:iam::058264098719:oidc-provider/oidc.eks.us-east-2.amazonaws.com/id/66329761380A833FE28A52DCB8889417"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
                "StringEquals": {
                    "oidc.eks.us-east-2.amazonaws.com/id/66329761380A833FE28A52DCB8889417:sub": "system:serviceaccount:idm:secretsstore-csi-sa",  //Create SA in next step
                    "oidc.eks.us-east-2.amazonaws.com/id/66329761380A833FE28A52DCB8889417:aud": "sts.amazonaws.com"
                }
            }
        }
    ]
}

This policy has to be attached with all the Roles associated with SA irrespective of secrets store csi driver, 
because after implementing secrets store csi driver, other custom SA (used by some pods) will need access to Secrets Manager. So it is better to add and keep it.

Attached policy: arn:aws:iam::465401547907:policy/demo2-secret-store-csi-driver-custom-policy-01

4. Add secrets in AWS secrets Manager.

5. Create SA - secrets-store-csi-sa

apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-store-csi-sa
  namespace: idm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::058264098719:role/SecretStoreCSIDriver

6. Create role and rolebinding (ns idm for the SA created above)

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: idm
  name: secrets-store-csi-role
rules:
- apiGroups: [""]
  resources: ["pods", "deployment", "services", "daemonsets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secrets-store-csi-rolebinding
  namespace: idm
subjects:
- kind: ServiceAccount
  name: secrets-store-csi-sa
  namespace: idm
roleRef:
  kind: Role
  name: secrets-store-csi-role
  apiGroup: rbac.authorization.k8s.io
 
7. Create SecretProviderClass in idm ns - mqsecrets-aws-secrets-csi
It tells where the secret is stored and pulls them.
The SecretProviderClass is a namespaced resource.

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: aws-secrets-csi
  namespace: idm
spec:
  provider: aws
  parameters:
    objects: |
        - objectName: "mqsecrets-aws"
          objectType: "secretsmanager"
        - objectNAme: "db-rds-idm-aws"
          objectType: "secretsmanager"
        - objectNAme: "oidc-idm"
          objectType: "secretsmanager"


k get secretproviderclass -n idm

8. Update deployment with SA,volume and volumeMount

serviceAccountName: secrets-store-csi-sa

      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "mqsecrets-aws-secrets-csi"


        volumeMounts:
        - name: secrets-store-inline
          mountPath: /mnt/secrets-store
          readOnly: true

9. Enable secret auto rotation - checks and updates the secrets into pod. By default it checks every 2 mins.

helm search repo csi
helm show values secrets-store-csi-driver/secrets-store-csi-driver
helm show values secrets-store-csi-driver/secrets-store-csi-driver >> csi-config.yaml
vi csi-config.yaml
enableSecretRotation: true
helm list -n kube-system
helm upgrade csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --values csi-config.yaml -n kube-system
